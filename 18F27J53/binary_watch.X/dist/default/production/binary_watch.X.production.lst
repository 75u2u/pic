

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Nov 25 14:18:28 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F27J53
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    21  0000                     
    22                           	psect	idataCOMRAM
    23  000596                     __pidataCOMRAM:
    24                           	opt stack 0
    25                           
    26                           ;initializer for print_7seg@pattern
    27  000596  00                 	db	0
    28  000597  01                 	db	1
    29  000598  02                 	db	2
    30  000599  03                 	db	3
    31  00059A  04                 	db	4
    32  00059B  05                 	db	5
    33  00059C  06                 	db	6
    34  00059D  07                 	db	7
    35  00059E  08                 	db	8
    36  00059F  09                 	db	9
    37                           
    38                           ;initializer for dinamic@dinamic_counter
    39  0005A0  01                 	db	1
    40  0000                     _RPINR1	set	3809
    41  0000                     _RPINR2	set	3810
    42  0000                     _ANCON0	set	3912
    43  0000                     _ANCON1	set	3913
    44  0000                     _DSCONHbits	set	3917
    45  0000                     _DSCONLbits	set	3916
    46  0000                     _RTCCAL	set	3902
    47  0000                     _RTCCFG	set	3903
    48  0000                     _RTCCFGbits	set	3903
    49  0000                     _RTCVALH	set	3899
    50  0000                     _RTCVALL	set	3898
    51  0000                     _EECON2	set	4007
    52  0000                     _INTCON2bits	set	4081
    53  0000                     _INTCON3bits	set	4080
    54  0000                     _INTCONbits	set	4082
    55  0000                     _LATB	set	3978
    56  0000                     _OSCCONbits	set	4051
    57  0000                     _PIE1bits	set	3997
    58  0000                     _PIR1bits	set	3998
    59  0000                     _PORTAbits	set	3968
    60  0000                     _PORTCbits	set	3970
    61  0000                     _T1CON	set	4045
    62  0000                     _TMR1H	set	4047
    63  0000                     _TMR1L	set	4046
    64  0000                     _TRISA	set	3986
    65  0000                     _TRISB	set	3987
    66  0000                     _TRISC	set	3988
    67  0000                     _LATA0	set	31816
    68  0000                     _LATA1	set	31817
    69  0000                     _LATA2	set	31818
    70  0000                     _LATA3	set	31819
    71  0000                     _LATA5	set	31821
    72  0000                     _LATB0	set	31824
    73  0000                     _LATB1	set	31825
    74  0000                     _LATB2	set	31826
    75  0000                     _LATB3	set	31827
    76  0000                     _LATB4	set	31828
    77  0000                     _LATB5	set	31829
    78  0000                     _LATB6	set	31830
    79  0000                     _LATB7	set	31831
    80  0000                     _LATC6	set	31838
    81  0000                     _LATC7	set	31839
    82                           
    83                           ; #config settings
    84  0000                     
    85                           	psect	cinit
    86  000564                     __pcinit:
    87                           	opt stack 0
    88  000564                     start_initialization:
    89                           	opt stack 0
    90  000564                     __initialization:
    91                           	opt stack 0
    92                           
    93                           ; Clear objects allocated to COMRAM (4 bytes)
    94  000564  6A2D               	clrf	(__pbssCOMRAM+3)& (0+255),c
    95  000566  6A2C               	clrf	(__pbssCOMRAM+2)& (0+255),c
    96  000568  6A2B               	clrf	(__pbssCOMRAM+1)& (0+255),c
    97  00056A  6A2A               	clrf	__pbssCOMRAM& (0+255),c
    98                           
    99                           ; Initialize objects allocated to COMRAM (11 bytes)
   100                           ; load TBLPTR registers with __pidataCOMRAM
   101  00056C  0E96               	movlw	low __pidataCOMRAM
   102  00056E  6EF6               	movwf	tblptrl,c
   103  000570  0E05               	movlw	high __pidataCOMRAM
   104  000572  6EF7               	movwf	tblptrh,c
   105  000574  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   106  000576  6EF8               	movwf	tblptru,c
   107  000578  EE00  F01F         	lfsr	0,__pdataCOMRAM
   108  00057C  EE10 F00B          	lfsr	1,11
   109  000580                     copy_data0:
   110  000580  0009               	tblrd		*+
   111  000582  CFF5 FFEE          	movff	tablat,postinc0
   112  000586  50E5               	movf	postdec1,w,c
   113  000588  50E1               	movf	fsr1l,w,c
   114  00058A  E1FA               	bnz	copy_data0
   115  00058C                     end_of_initialization:
   116                           	opt stack 0
   117  00058C                     __end_of__initialization:
   118                           	opt stack 0
   119  00058C  902E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   120  00058E  922E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   121  000590  0100               	movlb	0
   122  000592  EF66  F001         	goto	_main	;jump to C main() function
   123                           tblptru	equ	0xFF8
   124                           tblptrh	equ	0xFF7
   125                           tblptrl	equ	0xFF6
   126                           tablat	equ	0xFF5
   127                           postinc0	equ	0xFEE
   128                           postdec1	equ	0xFE5
   129                           fsr1l	equ	0xFE1
   130                           
   131                           	psect	bssCOMRAM
   132  00002A                     __pbssCOMRAM:
   133                           	opt stack 0
   134  00002A                     dinamic@hou:
   135                           	opt stack 0
   136  00002A                     	ds	1
   137  00002B                     dinamic@min:
   138                           	opt stack 0
   139  00002B                     	ds	1
   140  00002C                     dinamic@sec:
   141                           	opt stack 0
   142  00002C                     	ds	1
   143  00002D                     dinamic@wkd:
   144                           	opt stack 0
   145  00002D                     	ds	1
   146                           tblptru	equ	0xFF8
   147                           tblptrh	equ	0xFF7
   148                           tblptrl	equ	0xFF6
   149                           tablat	equ	0xFF5
   150                           postinc0	equ	0xFEE
   151                           postdec1	equ	0xFE5
   152                           fsr1l	equ	0xFE1
   153                           
   154                           	psect	dataCOMRAM
   155  00001F                     __pdataCOMRAM:
   156                           	opt stack 0
   157  00001F                     print_7seg@pattern:
   158                           	opt stack 0
   159  00001F                     	ds	10
   160  000029                     dinamic@dinamic_counter:
   161                           	opt stack 0
   162  000029                     	ds	1
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           postdec1	equ	0xFE5
   169                           fsr1l	equ	0xFE1
   170                           
   171                           	psect	cstackCOMRAM
   172  000001                     __pcstackCOMRAM:
   173                           	opt stack 0
   174  000001                     ?___awdiv:
   175                           	opt stack 0
   176  000001                     ?___awmod:
   177                           	opt stack 0
   178  000001                     print_column@col:
   179                           	opt stack 0
   180  000001                     print_pattern@pat:
   181                           	opt stack 0
   182  000001                     ___awdiv@dividend:
   183                           	opt stack 0
   184  000001                     ___awmod@dividend:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0x0
   188  000001                     	ds	1
   189  000002                     print_7seg@c:
   190                           	opt stack 0
   191                           
   192                           ; 1 bytes @ 0x1
   193  000002                     	ds	1
   194  000003                     ??_print_7seg:
   195  000003                     ___awdiv@divisor:
   196                           	opt stack 0
   197  000003                     ___awmod@divisor:
   198                           	opt stack 0
   199                           
   200                           ; 2 bytes @ 0x2
   201  000003                     	ds	2
   202  000005                     ___awdiv@counter:
   203                           	opt stack 0
   204  000005                     ___awmod@counter:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x4
   208  000005                     	ds	1
   209  000006                     ___awdiv@sign:
   210                           	opt stack 0
   211  000006                     ___awmod@sign:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0x5
   215  000006                     	ds	1
   216  000007                     print_7seg@col:
   217                           	opt stack 0
   218  000007                     ___awdiv@quotient:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x6
   222  000007                     	ds	1
   223  000008                     print_7seg@pat:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x7
   227  000008                     	ds	1
   228  000009                     ??_dinamic:
   229                           
   230                           ; 1 bytes @ 0x8
   231  000009                     	ds	1
   232  00000A                     _dinamic$621:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x9
   236  00000A                     	ds	2
   237  00000C                     ??_ISR:
   238                           
   239                           ; 1 bytes @ 0xB
   240  00000C                     	ds	16
   241  00001C                     ISR@val:
   242                           	opt stack 0
   243                           
   244                           ; 1 bytes @ 0x1B
   245  00001C                     	ds	1
   246  00001D                     ISR@val_669:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x1C
   250  00001D                     	ds	1
   251  00001E                     ??_main:
   252                           
   253                           ; 1 bytes @ 0x1D
   254  00001E                     	ds	1
   255                           tblptru	equ	0xFF8
   256                           tblptrh	equ	0xFF7
   257                           tblptrl	equ	0xFF6
   258                           tablat	equ	0xFF5
   259                           postinc0	equ	0xFEE
   260                           postdec1	equ	0xFE5
   261                           fsr1l	equ	0xFE1
   262                           
   263 ;;
   264 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   265 ;;
   266 ;; *************** function _main *****************
   267 ;; Defined at:
   268 ;;		line 127 in file "main.c"
   269 ;; Parameters:    Size  Location     Type
   270 ;;		None
   271 ;; Auto vars:     Size  Location     Type
   272 ;;		None
   273 ;; Return value:  Size  Location     Type
   274 ;;                  2  172[None  ] int 
   275 ;; Registers used:
   276 ;;		wreg, status,2
   277 ;; Tracked objects:
   278 ;;		On entry : 0/0
   279 ;;		On exit  : 0/0
   280 ;;		Unchanged: 0/0
   281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   285 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   286 ;;Total ram usage:        1 bytes
   287 ;; Hardware stack levels required when called:    4
   288 ;; This function calls:
   289 ;;		Nothing
   290 ;; This function is called by:
   291 ;;		Startup code after reset
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           	psect	text0
   296  0002CC                     __ptext0:
   297                           	opt stack 0
   298  0002CC                     _main:
   299                           	opt stack 27
   300                           
   301                           ;main.c: 128: OSCCONbits.SCS = 0;
   302                           
   303                           ;incstack = 0
   304  0002CC  0EFC               	movlw	-4
   305  0002CE  16D3               	andwf	4051,f,c	;volatile
   306                           
   307                           ;main.c: 129: DSCONLbits.RELEASE = 0;
   308  0002D0  010F               	movlb	15	; () banked
   309  0002D2  914C               	bcf	76,0,b	;volatile
   310                           
   311                           ;main.c: 130: TRISA = 0b00000000;
   312  0002D4  0E00               	movlw	0
   313  0002D6  6E92               	movwf	3986,c	;volatile
   314                           
   315                           ;main.c: 131: TRISB = 0b00000000;
   316  0002D8  0E00               	movlw	0
   317  0002DA  6E93               	movwf	3987,c	;volatile
   318                           
   319                           ;main.c: 132: TRISC = 0b00111111;
   320  0002DC  0E3F               	movlw	63
   321  0002DE  6E94               	movwf	3988,c	;volatile
   322                           
   323                           ;main.c: 133: ANCON0 = 0b0000000;
   324  0002E0  0E00               	movlw	0
   325  0002E2  010F               	movlb	15	; () banked
   326  0002E4  6F48               	movwf	72,b	;volatile
   327                           
   328                           ;main.c: 134: ANCON1 = 0b0000000;
   329  0002E6  0E00               	movlw	0
   330  0002E8  010F               	movlb	15	; () banked
   331  0002EA  6F49               	movwf	73,b	;volatile
   332                           
   333                           ;main.c: 137: T1CON = 0b10001101;
   334  0002EC  0E8D               	movlw	141
   335  0002EE  6ECD               	movwf	4045,c	;volatile
   336                           
   337                           ; BSR set to: 15
   338                           ;main.c: 138: PIE1bits.TMR1IE = 1;
   339  0002F0  809D               	bsf	3997,0,c	;volatile
   340                           
   341                           ;main.c: 141: EECON2 = 0x55;
   342  0002F2  0E55               	movlw	85
   343  0002F4  6EA7               	movwf	4007,c	;volatile
   344                           
   345                           ;main.c: 142: EECON2 = 0xAA;
   346  0002F6  0EAA               	movlw	170
   347  0002F8  6EA7               	movwf	4007,c	;volatile
   348                           
   349                           ; BSR set to: 15
   350                           ;main.c: 143: RTCCFGbits.RTCWREN = 1;
   351  0002FA  010F               	movlb	15	; () banked
   352  0002FC  8B3F               	bsf	63,5,b	;volatile
   353                           
   354                           ;main.c: 144: RTCCFG = 0b10100000;
   355  0002FE  0EA0               	movlw	160
   356  000300  010F               	movlb	15	; () banked
   357  000302  6F3F               	movwf	63,b	;volatile
   358                           
   359                           ;main.c: 145: RTCCAL = 0x00;
   360  000304  0E00               	movlw	0
   361  000306  010F               	movlb	15	; () banked
   362  000308  6F3E               	movwf	62,b	;volatile
   363                           
   364                           ; BSR set to: 15
   365                           ;main.c: 148: INTCON2bits.INTEDG0 = 0;
   366  00030A  9CF1               	bcf	intcon2,6,c	;volatile
   367                           
   368                           ; BSR set to: 15
   369                           ;main.c: 149: INTCONbits.INT0IF = 0;
   370  00030C  92F2               	bcf	intcon,1,c	;volatile
   371                           
   372                           ; BSR set to: 15
   373                           ;main.c: 150: INTCONbits.INT0IE = 1;
   374  00030E  88F2               	bsf	intcon,4,c	;volatile
   375                           
   376                           ;main.c: 153: RPINR1 = 2;
   377  000310  0E02               	movlw	2
   378  000312  010E               	movlb	14	; () banked
   379  000314  6FE1               	movwf	225,b	;volatile
   380                           
   381                           ; BSR set to: 14
   382                           ;main.c: 154: INTCON2bits.INTEDG1 = 0;
   383  000316  9AF1               	bcf	intcon2,5,c	;volatile
   384                           
   385                           ; BSR set to: 14
   386                           ;main.c: 155: INTCON3bits.INT1IF = 0;
   387  000318  90F0               	bcf	intcon3,0,c	;volatile
   388                           
   389                           ; BSR set to: 14
   390                           ;main.c: 156: INTCON3bits.INT1IE = 1;
   391  00031A  86F0               	bsf	intcon3,3,c	;volatile
   392                           
   393                           ;main.c: 159: RPINR2 = 13;
   394  00031C  0E0D               	movlw	13
   395  00031E  010E               	movlb	14	; () banked
   396  000320  6FE2               	movwf	226,b	;volatile
   397                           
   398                           ; BSR set to: 14
   399                           ;main.c: 160: INTCON2bits.INTEDG2 = 0;
   400  000322  98F1               	bcf	intcon2,4,c	;volatile
   401                           
   402                           ; BSR set to: 14
   403                           ;main.c: 161: INTCON3bits.INT2IF = 0;
   404  000324  92F0               	bcf	intcon3,1,c	;volatile
   405                           
   406                           ; BSR set to: 14
   407                           ;main.c: 162: INTCON3bits.INT2IE = 1;
   408  000326  88F0               	bsf	intcon3,4,c	;volatile
   409                           
   410                           ; BSR set to: 14
   411                           ;main.c: 165: INTCONbits.PEIE = 1;
   412  000328  8CF2               	bsf	intcon,6,c	;volatile
   413                           
   414                           ; BSR set to: 14
   415                           ;main.c: 166: INTCONbits.GIE = 1;
   416  00032A  8EF2               	bsf	intcon,7,c	;volatile
   417  00032C                     l1018:
   418                           
   419                           ;main.c: 169: _delay((unsigned long)((10000)*(4000000/4000000.0))) ;
   420  00032C  0E0D               	movlw	13
   421  00032E  6E1E               	movwf	??_main& (0+255),c
   422  000330  0EFC               	movlw	252
   423  000332                     u757:
   424  000332  2EE8               	decfsz	wreg,f,c
   425  000334  D7FE               	goto	u757
   426  000336  2E1E               	decfsz	??_main& (0+255),f,c
   427  000338  D7FC               	goto	u757
   428                           
   429                           ;main.c: 170: LATA0=1;
   430  00033A  8089               	bsf	3977,0,c	;volatile
   431                           
   432                           ;main.c: 171: LATA1=1;
   433  00033C  8289               	bsf	3977,1,c	;volatile
   434                           
   435                           ;main.c: 172: LATA2=1;
   436  00033E  8489               	bsf	3977,2,c	;volatile
   437                           
   438                           ;main.c: 173: LATA3=1;
   439  000340  8689               	bsf	3977,3,c	;volatile
   440                           
   441                           ;main.c: 175: LATA5=1;
   442  000342  8A89               	bsf	3977,5,c	;volatile
   443                           
   444                           ;main.c: 176: LATC6=1;
   445  000344  8C8B               	bsf	3979,6,c	;volatile
   446                           
   447                           ;main.c: 177: LATC7=1;
   448  000346  8E8B               	bsf	3979,7,c	;volatile
   449                           
   450                           ;main.c: 178: LATB0=1;
   451  000348  808A               	bsf	3978,0,c	;volatile
   452                           
   453                           ;main.c: 179: LATB1=1;
   454  00034A  828A               	bsf	3978,1,c	;volatile
   455                           
   456                           ;main.c: 180: LATB2=1;
   457  00034C  848A               	bsf	3978,2,c	;volatile
   458                           
   459                           ;main.c: 181: LATB3=1;
   460  00034E  868A               	bsf	3978,3,c	;volatile
   461                           
   462                           ;main.c: 182: LATB4=1;
   463  000350  888A               	bsf	3978,4,c	;volatile
   464                           
   465                           ;main.c: 183: LATB5=1;
   466  000352  8A8A               	bsf	3978,5,c	;volatile
   467                           
   468                           ;main.c: 184: LATB6=1;
   469  000354  8C8A               	bsf	3978,6,c	;volatile
   470                           
   471                           ;main.c: 185: LATB7=1;
   472  000356  8E8A               	bsf	3978,7,c	;volatile
   473                           
   474                           ;main.c: 186: _delay((unsigned long)((10000)*(4000000/4000000.0))) ;
   475  000358  0E0D               	movlw	13
   476  00035A  6E1E               	movwf	??_main& (0+255),c
   477  00035C  0EFC               	movlw	252
   478  00035E                     u767:
   479  00035E  2EE8               	decfsz	wreg,f,c
   480  000360  D7FE               	goto	u767
   481  000362  2E1E               	decfsz	??_main& (0+255),f,c
   482  000364  D7FC               	goto	u767
   483                           
   484                           ;main.c: 187: LATA0=0;
   485  000366  9089               	bcf	3977,0,c	;volatile
   486                           
   487                           ;main.c: 188: LATA1=0;
   488  000368  9289               	bcf	3977,1,c	;volatile
   489                           
   490                           ;main.c: 189: LATA2=0;
   491  00036A  9489               	bcf	3977,2,c	;volatile
   492                           
   493                           ;main.c: 190: LATA3=0;
   494  00036C  9689               	bcf	3977,3,c	;volatile
   495                           
   496                           ;main.c: 192: LATA5=1;
   497  00036E  8A89               	bsf	3977,5,c	;volatile
   498                           
   499                           ;main.c: 193: LATC6=1;
   500  000370  8C8B               	bsf	3979,6,c	;volatile
   501                           
   502                           ;main.c: 194: LATC7=1;
   503  000372  8E8B               	bsf	3979,7,c	;volatile
   504                           
   505                           ;main.c: 195: LATB0=1;
   506  000374  808A               	bsf	3978,0,c	;volatile
   507                           
   508                           ;main.c: 196: LATB1=1;
   509  000376  828A               	bsf	3978,1,c	;volatile
   510                           
   511                           ;main.c: 197: LATB2=1;
   512  000378  848A               	bsf	3978,2,c	;volatile
   513                           
   514                           ;main.c: 198: LATB3=1;
   515  00037A  868A               	bsf	3978,3,c	;volatile
   516                           
   517                           ;main.c: 199: LATB4=0;
   518  00037C  988A               	bcf	3978,4,c	;volatile
   519                           
   520                           ;main.c: 200: LATB5=0;
   521  00037E  9A8A               	bcf	3978,5,c	;volatile
   522                           
   523                           ;main.c: 201: LATB6=0;
   524  000380  9C8A               	bcf	3978,6,c	;volatile
   525                           
   526                           ;main.c: 202: LATB7=0;
   527  000382  9E8A               	bcf	3978,7,c	;volatile
   528  000384  D7D3               	goto	l1018
   529  000386                     __end_of_main:
   530                           	opt stack 0
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           intcon	equ	0xFF2
   536                           intcon2	equ	0xFF1
   537                           intcon3	equ	0xFF0
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1l	equ	0xFE1
   542                           
   543 ;; *************** function _ISR *****************
   544 ;; Defined at:
   545 ;;		line 83 in file "main.c"
   546 ;; Parameters:    Size  Location     Type
   547 ;;		None
   548 ;; Auto vars:     Size  Location     Type
   549 ;;  val             1   28[COMRAM] unsigned char 
   550 ;;  val             1   27[COMRAM] unsigned char 
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   562 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   563 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   564 ;;Total ram usage:       18 bytes
   565 ;; Hardware stack levels used:    1
   566 ;; Hardware stack levels required when called:    3
   567 ;; This function calls:
   568 ;;		___awdiv
   569 ;;		___awmod
   570 ;;		_dinamic
   571 ;;		_print_7seg
   572 ;; This function is called by:
   573 ;;		Interrupt level 2
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           	psect	intcode
   578  000008                     __pintcode:
   579                           	opt stack 0
   580  000008                     _ISR:
   581                           	opt stack 27
   582                           
   583                           ;incstack = 0
   584  000008  822E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   585  00000A  CFFA F00E          	movff	pclath,??_ISR+2
   586  00000E  CFFB F00F          	movff	pclatu,??_ISR+3
   587  000012  CFE9 F010          	movff	fsr0l,??_ISR+4
   588  000016  CFEA F011          	movff	fsr0h,??_ISR+5
   589  00001A  CFE1 F012          	movff	fsr1l,??_ISR+6
   590  00001E  CFE2 F013          	movff	fsr1h,??_ISR+7
   591  000022  CFD9 F014          	movff	fsr2l,??_ISR+8
   592  000026  CFDA F015          	movff	fsr2h,??_ISR+9
   593  00002A  CFF3 F016          	movff	prodl,??_ISR+10
   594  00002E  CFF4 F017          	movff	prodh,??_ISR+11
   595  000032  CFF6 F018          	movff	tblptrl,??_ISR+12
   596  000036  CFF7 F019          	movff	tblptrh,??_ISR+13
   597  00003A  CFF8 F01A          	movff	tblptru,??_ISR+14
   598  00003E  CFF5 F01B          	movff	tablat,??_ISR+15
   599                           
   600                           ;main.c: 84: if (INTCONbits.INT0IE && INTCONbits.INT0IF) {
   601  000042  B8F2               	btfsc	intcon,4,c	;volatile
   602  000044  A2F2               	btfss	intcon,1,c	;volatile
   603  000046  D00A               	goto	i2l1246
   604                           
   605                           ;main.c: 85: INTCONbits.INT0IF = 0;
   606  000048  92F2               	bcf	intcon,1,c	;volatile
   607                           
   608                           ;main.c: 86: INTCONbits.GIE = 0;
   609  00004A  9EF2               	bcf	intcon,7,c	;volatile
   610                           
   611                           ;main.c: 87: print_7seg(-1, ':');
   612  00004C  0E3A               	movlw	58
   613  00004E  6E02               	movwf	print_7seg@c,c
   614  000050  0EFF               	movlw	255
   615  000052  ECC3  F001         	call	_print_7seg
   616                           
   617                           ;main.c: 88: DSCONHbits.DSEN = 1;
   618  000056  010F               	movlb	15	; () banked
   619  000058  8F4D               	bsf	77,7,b	;volatile
   620  00005A  0003               	sleep		;# 
   621  00005C                     i2l1246:
   622                           
   623                           ;main.c: 90: }
   624                           ;main.c: 91: if (INTCON3bits.INT1IE && INTCON3bits.INT1IF) {
   625  00005C  B6F0               	btfsc	intcon3,3,c	;volatile
   626  00005E  A0F0               	btfss	intcon3,0,c	;volatile
   627  000060  D052               	goto	i2l1268
   628                           
   629                           ;main.c: 92: INTCON3bits.INT1IF = 0;
   630  000062  90F0               	bcf	intcon3,0,c	;volatile
   631                           
   632                           ;main.c: 93: if (PORTAbits.RA5 == 0) {
   633  000064  BA80               	btfsc	3968,5,c	;volatile
   634  000066  D04F               	goto	i2l1268
   635                           
   636                           ;main.c: 94: print_7seg(-1, ' ');
   637  000068  0E20               	movlw	32
   638  00006A  6E02               	movwf	print_7seg@c,c
   639  00006C  0EFF               	movlw	255
   640  00006E  ECC3  F001         	call	_print_7seg
   641                           
   642                           ;main.c: 95: RTCCFGbits.RTCPTR0 = 0;
   643  000072  010F               	movlb	15	; () banked
   644  000074  913F               	bcf	63,0,b	;volatile
   645                           
   646                           ; BSR set to: 15
   647                           ;main.c: 96: RTCCFGbits.RTCPTR1 = 0;
   648  000076  010F               	movlb	15	; () banked
   649  000078  933F               	bcf	63,1,b	;volatile
   650  00007A                     i2l161:
   651                           
   652                           ; BSR set to: 15
   653  00007A  010F               	movlb	15	; () banked
   654  00007C  B93F               	btfsc	63,4,b	;volatile
   655  00007E  D7FD               	goto	i2l161
   656                           
   657                           ; BSR set to: 15
   658                           ;main.c: 98: uint8_t val = RTCVALH;
   659  000080  CF3B F01C          	movff	3899,ISR@val	;volatile
   660                           
   661                           ; BSR set to: 15
   662                           ;main.c: 99: val = ((val >> 4)*10 + (val & 0x0F) + 1) % 60;
   663  000084  C01C  F00C         	movff	ISR@val,??_ISR
   664  000088  3A0C               	swapf	??_ISR,f,c
   665  00008A  0E0F               	movlw	15
   666  00008C  160C               	andwf	??_ISR,f,c
   667  00008E  500C               	movf	??_ISR,w,c
   668  000090  0D0A               	mullw	10
   669  000092  C01C  F00D         	movff	ISR@val,??_ISR+1
   670  000096  0E0F               	movlw	15
   671  000098  160D               	andwf	??_ISR+1,f,c
   672  00009A  500D               	movf	??_ISR+1,w,c
   673  00009C  26F3               	addwf	prodl,f,c
   674  00009E  0E00               	movlw	0
   675  0000A0  22F4               	addwfc	prodh,f,c
   676  0000A2  0E01               	movlw	1
   677  0000A4  24F3               	addwf	prodl,w,c
   678  0000A6  6E01               	movwf	___awmod@dividend,c
   679  0000A8  0E00               	movlw	0
   680  0000AA  20F4               	addwfc	prodh,w,c
   681  0000AC  6E02               	movwf	___awmod@dividend+1,c
   682  0000AE  0E00               	movlw	0
   683  0000B0  6E04               	movwf	___awmod@divisor+1,c
   684  0000B2  0E3C               	movlw	60
   685  0000B4  6E03               	movwf	___awmod@divisor,c
   686  0000B6  EC56  F002         	call	___awmod	;wreg free
   687  0000BA  5001               	movf	?___awmod,w,c
   688  0000BC  6E1C               	movwf	ISR@val,c
   689                           
   690                           ;main.c: 100: RTCCFGbits.RTCPTR0 = 0;
   691  0000BE  010F               	movlb	15	; () banked
   692  0000C0  913F               	bcf	63,0,b	;volatile
   693                           
   694                           ; BSR set to: 15
   695                           ;main.c: 101: RTCCFGbits.RTCPTR1 = 0;
   696  0000C2  010F               	movlb	15	; () banked
   697  0000C4  933F               	bcf	63,1,b	;volatile
   698                           
   699                           ; BSR set to: 15
   700                           ;main.c: 102: RTCVALH = ((val / 10) << 4) + ((val % 10)&0x0F);
   701  0000C6  C01C  F001         	movff	ISR@val,___awmod@dividend
   702  0000CA  6A02               	clrf	___awmod@dividend+1,c
   703  0000CC  0E00               	movlw	0
   704  0000CE  6E04               	movwf	___awmod@divisor+1,c
   705  0000D0  0E0A               	movlw	10
   706  0000D2  6E03               	movwf	___awmod@divisor,c
   707  0000D4  EC56  F002         	call	___awmod	;wreg free
   708  0000D8  C001  F00C         	movff	?___awmod,??_ISR
   709  0000DC  C002  F00D         	movff	?___awmod+1,??_ISR+1
   710  0000E0  0E0F               	movlw	15
   711  0000E2  160C               	andwf	??_ISR,f,c
   712  0000E4  C01C  F001         	movff	ISR@val,___awdiv@dividend
   713  0000E8  6A02               	clrf	___awdiv@dividend+1,c
   714  0000EA  0E00               	movlw	0
   715  0000EC  6E04               	movwf	___awdiv@divisor+1,c
   716  0000EE  0E0A               	movlw	10
   717  0000F0  6E03               	movwf	___awdiv@divisor,c
   718  0000F2  EC14  F002         	call	___awdiv	;wreg free
   719  0000F6  3801               	swapf	?___awdiv,w,c
   720  0000F8  0BF0               	andlw	240
   721  0000FA  240C               	addwf	??_ISR,w,c
   722  0000FC  010F               	movlb	15	; () banked
   723  0000FE  6F3B               	movwf	59,b	;volatile
   724                           
   725                           ; BSR set to: 15
   726                           ;main.c: 103: RTCVALL = 0;
   727  000100  0E00               	movlw	0
   728  000102  010F               	movlb	15	; () banked
   729  000104  6F3A               	movwf	58,b	;volatile
   730  000106                     i2l1268:
   731                           
   732                           ;main.c: 104: }
   733                           ;main.c: 105: }
   734                           ;main.c: 106: if (INTCON3bits.INT2IE && INTCON3bits.INT2IF) {
   735  000106  B8F0               	btfsc	intcon3,4,c	;volatile
   736  000108  A2F0               	btfss	intcon3,1,c	;volatile
   737  00010A  D04F               	goto	i2l1288
   738                           
   739                           ;main.c: 107: INTCON3bits.INT2IF = 0;
   740  00010C  92F0               	bcf	intcon3,1,c	;volatile
   741                           
   742                           ;main.c: 108: if (PORTCbits.RC2 == 0) {
   743  00010E  B482               	btfsc	3970,2,c	;volatile
   744  000110  D04C               	goto	i2l1288
   745                           
   746                           ;main.c: 109: print_7seg(-1, ' ');
   747  000112  0E20               	movlw	32
   748  000114  6E02               	movwf	print_7seg@c,c
   749  000116  0EFF               	movlw	255
   750  000118  ECC3  F001         	call	_print_7seg
   751                           
   752                           ;main.c: 110: RTCCFGbits.RTCPTR0 = 1;
   753  00011C  010F               	movlb	15	; () banked
   754  00011E  813F               	bsf	63,0,b	;volatile
   755                           
   756                           ; BSR set to: 15
   757                           ;main.c: 111: RTCCFGbits.RTCPTR1 = 0;
   758  000120  010F               	movlb	15	; () banked
   759  000122  933F               	bcf	63,1,b	;volatile
   760  000124                     i2l166:
   761                           
   762                           ; BSR set to: 15
   763  000124  010F               	movlb	15	; () banked
   764  000126  B93F               	btfsc	63,4,b	;volatile
   765  000128  D7FD               	goto	i2l166
   766                           
   767                           ; BSR set to: 15
   768                           ;main.c: 113: uint8_t val = RTCVALL;
   769  00012A  CF3A F01D          	movff	3898,ISR@val_669	;volatile
   770                           
   771                           ; BSR set to: 15
   772                           ;main.c: 114: val = ((val >> 4)*10 + (val & 0x0F) + 1) % 24;
   773  00012E  C01D  F00C         	movff	ISR@val_669,??_ISR
   774  000132  3A0C               	swapf	??_ISR,f,c
   775  000134  0E0F               	movlw	15
   776  000136  160C               	andwf	??_ISR,f,c
   777  000138  500C               	movf	??_ISR,w,c
   778  00013A  0D0A               	mullw	10
   779  00013C  C01D  F00D         	movff	ISR@val_669,??_ISR+1
   780  000140  0E0F               	movlw	15
   781  000142  160D               	andwf	??_ISR+1,f,c
   782  000144  500D               	movf	??_ISR+1,w,c
   783  000146  26F3               	addwf	prodl,f,c
   784  000148  0E00               	movlw	0
   785  00014A  22F4               	addwfc	prodh,f,c
   786  00014C  0E01               	movlw	1
   787  00014E  24F3               	addwf	prodl,w,c
   788  000150  6E01               	movwf	___awmod@dividend,c
   789  000152  0E00               	movlw	0
   790  000154  20F4               	addwfc	prodh,w,c
   791  000156  6E02               	movwf	___awmod@dividend+1,c
   792  000158  0E00               	movlw	0
   793  00015A  6E04               	movwf	___awmod@divisor+1,c
   794  00015C  0E18               	movlw	24
   795  00015E  6E03               	movwf	___awmod@divisor,c
   796  000160  EC56  F002         	call	___awmod	;wreg free
   797  000164  5001               	movf	?___awmod,w,c
   798  000166  6E1D               	movwf	ISR@val_669,c
   799                           
   800                           ;main.c: 115: RTCCFGbits.RTCPTR0 = 1;
   801  000168  010F               	movlb	15	; () banked
   802  00016A  813F               	bsf	63,0,b	;volatile
   803                           
   804                           ; BSR set to: 15
   805                           ;main.c: 116: RTCCFGbits.RTCPTR1 = 0;
   806  00016C  010F               	movlb	15	; () banked
   807  00016E  933F               	bcf	63,1,b	;volatile
   808                           
   809                           ; BSR set to: 15
   810                           ;main.c: 117: RTCVALL = ((val / 10) << 4) + ((val % 10)&0x0F);
   811  000170  C01D  F001         	movff	ISR@val_669,___awmod@dividend
   812  000174  6A02               	clrf	___awmod@dividend+1,c
   813  000176  0E00               	movlw	0
   814  000178  6E04               	movwf	___awmod@divisor+1,c
   815  00017A  0E0A               	movlw	10
   816  00017C  6E03               	movwf	___awmod@divisor,c
   817  00017E  EC56  F002         	call	___awmod	;wreg free
   818  000182  C001  F00C         	movff	?___awmod,??_ISR
   819  000186  C002  F00D         	movff	?___awmod+1,??_ISR+1
   820  00018A  0E0F               	movlw	15
   821  00018C  160C               	andwf	??_ISR,f,c
   822  00018E  C01D  F001         	movff	ISR@val_669,___awdiv@dividend
   823  000192  6A02               	clrf	___awdiv@dividend+1,c
   824  000194  0E00               	movlw	0
   825  000196  6E04               	movwf	___awdiv@divisor+1,c
   826  000198  0E0A               	movlw	10
   827  00019A  6E03               	movwf	___awdiv@divisor,c
   828  00019C  EC14  F002         	call	___awdiv	;wreg free
   829  0001A0  3801               	swapf	?___awdiv,w,c
   830  0001A2  0BF0               	andlw	240
   831  0001A4  240C               	addwf	??_ISR,w,c
   832  0001A6  010F               	movlb	15	; () banked
   833  0001A8  6F3A               	movwf	58,b	;volatile
   834  0001AA                     i2l1288:
   835                           
   836                           ;main.c: 118: }
   837                           ;main.c: 119: }
   838                           ;main.c: 120: if (PIE1bits.TMR1IE && PIR1bits.TMR1IF) {
   839  0001AA  B09D               	btfsc	3997,0,c	;volatile
   840  0001AC  A09E               	btfss	3998,0,c	;volatile
   841  0001AE  D004               	goto	i2l170
   842                           
   843                           ;main.c: 121: PIR1bits.TMR1IF = 0;
   844  0001B0  909E               	bcf	3998,0,c	;volatile
   845                           
   846                           ;main.c: 122: TMR1H = 0xFF;
   847  0001B2  68CF               	setf	4047,c	;volatile
   848                           
   849                           ;main.c: 123: dinamic();
   850  0001B4  ECFC  F000         	call	_dinamic	;wreg free
   851  0001B8                     i2l170:
   852  0001B8  C01B  FFF5         	movff	??_ISR+15,tablat
   853  0001BC  C01A  FFF8         	movff	??_ISR+14,tblptru
   854  0001C0  C019  FFF7         	movff	??_ISR+13,tblptrh
   855  0001C4  C018  FFF6         	movff	??_ISR+12,tblptrl
   856  0001C8  C017  FFF4         	movff	??_ISR+11,prodh
   857  0001CC  C016  FFF3         	movff	??_ISR+10,prodl
   858  0001D0  C015  FFDA         	movff	??_ISR+9,fsr2h
   859  0001D4  C014  FFD9         	movff	??_ISR+8,fsr2l
   860  0001D8  C013  FFE2         	movff	??_ISR+7,fsr1h
   861  0001DC  C012  FFE1         	movff	??_ISR+6,fsr1l
   862  0001E0  C011  FFEA         	movff	??_ISR+5,fsr0h
   863  0001E4  C010  FFE9         	movff	??_ISR+4,fsr0l
   864  0001E8  C00F  FFFB         	movff	??_ISR+3,pclatu
   865  0001EC  C00E  FFFA         	movff	??_ISR+2,pclath
   866  0001F0  922E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   867  0001F2  0011               	retfie		f
   868  0001F4                     __end_of_ISR:
   869                           	opt stack 0
   870                           pclatu	equ	0xFFB
   871                           pclath	equ	0xFFA
   872                           tblptru	equ	0xFF8
   873                           tblptrh	equ	0xFF7
   874                           tblptrl	equ	0xFF6
   875                           tablat	equ	0xFF5
   876                           prodh	equ	0xFF4
   877                           prodl	equ	0xFF3
   878                           intcon	equ	0xFF2
   879                           intcon2	equ	0xFF1
   880                           intcon3	equ	0xFF0
   881                           postinc0	equ	0xFEE
   882                           fsr0h	equ	0xFEA
   883                           fsr0l	equ	0xFE9
   884                           wreg	equ	0xFE8
   885                           postdec1	equ	0xFE5
   886                           fsr1h	equ	0xFE2
   887                           fsr1l	equ	0xFE1
   888                           fsr2h	equ	0xFDA
   889                           fsr2l	equ	0xFD9
   890                           
   891 ;; *************** function _dinamic *****************
   892 ;; Defined at:
   893 ;;		line 43 in file "main.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;		None
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      void 
   900 ;; Registers used:
   901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   909 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   910 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   911 ;;Total ram usage:        3 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    2
   914 ;; This function calls:
   915 ;;		_print_7seg
   916 ;; This function is called by:
   917 ;;		_ISR
   918 ;; This function uses a non-reentrant model
   919 ;;
   920                           
   921                           	psect	text2
   922  0001F8                     __ptext2:
   923                           	opt stack 0
   924  0001F8                     _dinamic:
   925                           	opt stack 27
   926                           
   927                           ;main.c: 44: static uint8_t dinamic_counter = 1;
   928                           ;main.c: 45: static uint8_t sec, min, hou, wkd;
   929                           ;main.c: 46: switch (dinamic_counter) {
   930                           
   931                           ;incstack = 0
   932  0001F8  D056               	goto	i2l1152
   933  0001FA                     i2l1114:
   934                           
   935                           ;main.c: 48: print_7seg(4, '0' + (min & 0x0F));
   936  0001FA  502B               	movf	dinamic@min,w,c
   937  0001FC  0B0F               	andlw	15
   938  0001FE  0F30               	addlw	48
   939  000200  6E02               	movwf	print_7seg@c,c
   940  000202  0E04               	movlw	4
   941  000204  ECC3  F001         	call	_print_7seg
   942  000208  D034               	goto	i2l1140
   943  00020A                     i2l1118:
   944                           
   945                           ;main.c: 52: print_7seg(3, '0' + (min >> 4));
   946  00020A  382B               	swapf	dinamic@min,w,c
   947  00020C  0B0F               	andlw	15
   948  00020E  0F30               	addlw	48
   949  000210  6E02               	movwf	print_7seg@c,c
   950  000212  0E03               	movlw	3
   951  000214  ECC3  F001         	call	_print_7seg
   952  000218  D02C               	goto	i2l1140
   953  00021A                     i2l1122:
   954                           
   955                           ;main.c: 56: print_7seg(2, '0' + (hou & 0x0F));
   956  00021A  502A               	movf	dinamic@hou,w,c
   957  00021C  0B0F               	andlw	15
   958  00021E  0F30               	addlw	48
   959  000220  6E02               	movwf	print_7seg@c,c
   960  000222  0E02               	movlw	2
   961  000224  ECC3  F001         	call	_print_7seg
   962  000228  D024               	goto	i2l1140
   963  00022A                     i2l1126:
   964                           
   965                           ;main.c: 60: if (hou & 0xF0) print_7seg(1, '0' + (hou >> 4));
   966  00022A  C02A  F009         	movff	dinamic@hou,??_dinamic
   967  00022E  0EF0               	movlw	240
   968  000230  1609               	andwf	??_dinamic,f,c
   969  000232  B4D8               	btfsc	status,2,c
   970  000234  D008               	goto	i2l1130
   971  000236  382A               	swapf	dinamic@hou,w,c
   972  000238  0B0F               	andlw	15
   973  00023A  0F30               	addlw	48
   974  00023C  6E02               	movwf	print_7seg@c,c
   975  00023E  0E01               	movlw	1
   976  000240  ECC3  F001         	call	_print_7seg
   977  000244  D016               	goto	i2l1140
   978  000246                     i2l1130:
   979                           
   980                           ;main.c: 61: else print_7seg(1, ' ');
   981  000246  0E20               	movlw	32
   982  000248  6E02               	movwf	print_7seg@c,c
   983  00024A  0E01               	movlw	1
   984  00024C  ECC3  F001         	call	_print_7seg
   985  000250  D010               	goto	i2l1140
   986  000252                     i2l146:
   987                           
   988                           ;main.c: 65: print_7seg(5, RTCCFGbits.HALFSEC ? ' ' : ':');
   989  000252  010F               	movlb	15	; () banked
   990  000254  B73F               	btfsc	63,3,b	;volatile
   991  000256  D004               	goto	i2l1136
   992                           
   993                           ; BSR set to: 15
   994  000258  0E00               	movlw	0
   995  00025A  6E0B               	movwf	_dinamic$621+1,c
   996  00025C  0E3A               	movlw	58
   997  00025E  D003               	goto	L1
   998  000260                     i2l1136:
   999                           
  1000                           ; BSR set to: 15
  1001  000260  0E00               	movlw	0
  1002  000262  6E0B               	movwf	_dinamic$621+1,c
  1003  000264  0E20               	movlw	32
  1004  000266                     L1:
  1005  000266  6E0A               	movwf	_dinamic$621,c
  1006                           
  1007                           ; BSR set to: 15
  1008                           
  1009                           ; BSR set to: 15
  1010  000268  C00A  F002         	movff	_dinamic$621,print_7seg@c
  1011  00026C  0E05               	movlw	5
  1012  00026E  ECC3  F001         	call	_print_7seg
  1013  000272                     i2l1140:
  1014                           
  1015                           ;main.c: 66: TMR1L += 0xF0;
  1016  000272  0EF0               	movlw	240
  1017  000274  26CE               	addwf	4046,f,c	;volatile
  1018                           
  1019                           ;main.c: 67: break;
  1020  000276  D028               	goto	i2l1154
  1021  000278                     i2l1142:
  1022                           
  1023                           ;main.c: 69: print_7seg(-1, ' ');
  1024  000278  0E20               	movlw	32
  1025  00027A  6E02               	movwf	print_7seg@c,c
  1026  00027C  0EFF               	movlw	255
  1027  00027E  ECC3  F001         	call	_print_7seg
  1028                           
  1029                           ;main.c: 70: RTCCFGbits.RTCPTR0 = 1;
  1030  000282  010F               	movlb	15	; () banked
  1031  000284  813F               	bsf	63,0,b	;volatile
  1032                           
  1033                           ; BSR set to: 15
  1034                           ;main.c: 71: RTCCFGbits.RTCPTR1 = 0;
  1035  000286  010F               	movlb	15	; () banked
  1036  000288  933F               	bcf	63,1,b	;volatile
  1037  00028A                     i2l152:
  1038                           
  1039                           ; BSR set to: 15
  1040  00028A  010F               	movlb	15	; () banked
  1041  00028C  B93F               	btfsc	63,4,b	;volatile
  1042  00028E  D7FD               	goto	i2l152
  1043                           
  1044                           ; BSR set to: 15
  1045                           ;main.c: 73: hou = RTCVALL;
  1046  000290  CF3A F02A          	movff	3898,dinamic@hou	;volatile
  1047                           
  1048                           ;main.c: 74: wkd = RTCVALH;
  1049  000294  CF3B F02D          	movff	3899,dinamic@wkd	;volatile
  1050                           
  1051                           ;main.c: 75: sec = RTCVALL;
  1052  000298  CF3A F02C          	movff	3898,dinamic@sec	;volatile
  1053                           
  1054                           ;main.c: 76: min = RTCVALH;
  1055  00029C  CF3B F02B          	movff	3899,dinamic@min	;volatile
  1056                           
  1057                           ; BSR set to: 15
  1058                           ;main.c: 77: dinamic_counter = 0;
  1059  0002A0  0E00               	movlw	0
  1060  0002A2  6E29               	movwf	dinamic@dinamic_counter,c
  1061                           
  1062                           ; BSR set to: 15
  1063                           ;main.c: 79: }
  1064                           
  1065                           ;main.c: 78: break;
  1066  0002A4  D011               	goto	i2l1154
  1067  0002A6                     i2l1152:
  1068  0002A6  5029               	movf	dinamic@dinamic_counter,w,c
  1069                           
  1070                           ; Switch size 1, requested type "space"
  1071                           ; Number of cases is 5, Range of values is 1 to 5
  1072                           ; switch strategies available:
  1073                           ; Name         Instructions Cycles
  1074                           ; simple_byte           16     9 (average)
  1075                           ;	Chosen strategy is simple_byte
  1076  0002A8  0A01               	xorlw	1	; case 1
  1077  0002AA  B4D8               	btfsc	status,2,c
  1078  0002AC  D7A6               	goto	i2l1114
  1079  0002AE  0A03               	xorlw	3	; case 2
  1080  0002B0  B4D8               	btfsc	status,2,c
  1081  0002B2  D7AB               	goto	i2l1118
  1082  0002B4  0A01               	xorlw	1	; case 3
  1083  0002B6  B4D8               	btfsc	status,2,c
  1084  0002B8  D7B0               	goto	i2l1122
  1085  0002BA  0A07               	xorlw	7	; case 4
  1086  0002BC  B4D8               	btfsc	status,2,c
  1087  0002BE  D7B5               	goto	i2l1126
  1088  0002C0  0A01               	xorlw	1	; case 5
  1089  0002C2  B4D8               	btfsc	status,2,c
  1090  0002C4  D7C6               	goto	i2l146
  1091  0002C6  D7D8               	goto	i2l1142
  1092  0002C8                     i2l1154:
  1093                           
  1094                           ;main.c: 80: dinamic_counter++;
  1095  0002C8  2A29               	incf	dinamic@dinamic_counter,f,c
  1096  0002CA  0012               	return		;funcret
  1097  0002CC                     __end_of_dinamic:
  1098                           	opt stack 0
  1099                           pclatu	equ	0xFFB
  1100                           pclath	equ	0xFFA
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           prodh	equ	0xFF4
  1106                           prodl	equ	0xFF3
  1107                           intcon	equ	0xFF2
  1108                           intcon2	equ	0xFF1
  1109                           intcon3	equ	0xFF0
  1110                           postinc0	equ	0xFEE
  1111                           fsr0h	equ	0xFEA
  1112                           fsr0l	equ	0xFE9
  1113                           wreg	equ	0xFE8
  1114                           postdec1	equ	0xFE5
  1115                           fsr1h	equ	0xFE2
  1116                           fsr1l	equ	0xFE1
  1117                           fsr2h	equ	0xFDA
  1118                           fsr2l	equ	0xFD9
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _print_7seg *****************
  1122 ;; Defined at:
  1123 ;;		line 21 in file "7seg.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;  col             1    wreg     unsigned char 
  1126 ;;  c               1    1[COMRAM] unsigned char 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  col             1    6[COMRAM] unsigned char 
  1129 ;;  pat             1    7[COMRAM] unsigned char 
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1139 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1140 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1141 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1142 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1143 ;;Total ram usage:        7 bytes
  1144 ;; Hardware stack levels used:    1
  1145 ;; Hardware stack levels required when called:    1
  1146 ;; This function calls:
  1147 ;;		_print_column
  1148 ;;		_print_pattern
  1149 ;; This function is called by:
  1150 ;;		_dinamic
  1151 ;;		_ISR
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text3
  1156  000386                     __ptext3:
  1157                           	opt stack 0
  1158  000386                     _print_7seg:
  1159                           	opt stack 28
  1160                           
  1161                           ;incstack = 0
  1162                           ;print_7seg@col stored from wreg
  1163  000386  6E07               	movwf	print_7seg@col,c
  1164                           
  1165                           ;7seg.c: 23: static uint8_t pattern[10] = {
  1166                           ;7seg.c: 36: 0b00000000,
  1167                           ;7seg.c: 37: 0b00000001,
  1168                           ;7seg.c: 38: 0b00000010,
  1169                           ;7seg.c: 39: 0b00000011,
  1170                           ;7seg.c: 40: 0b00000100,
  1171                           ;7seg.c: 41: 0b00000101,
  1172                           ;7seg.c: 42: 0b00000110,
  1173                           ;7seg.c: 43: 0b00000111,
  1174                           ;7seg.c: 44: 0b00001000,
  1175                           ;7seg.c: 45: 0b00001001,
  1176                           ;7seg.c: 46: };
  1177                           ;7seg.c: 47: uint8_t pat;
  1178                           ;7seg.c: 48: switch (c) {
  1179  000388  D01C               	goto	i2l1108
  1180  00038A                     i2l1096:
  1181                           
  1182                           ;7seg.c: 50: pat = 0b00000000;
  1183  00038A  0E00               	movlw	0
  1184  00038C  D018               	goto	L5
  1185  00038E                     i2l1098:
  1186                           
  1187                           ;7seg.c: 53: pat = 0b10100000;
  1188  00038E  0EA0               	movlw	160
  1189  000390  D016               	goto	L5
  1190  000392                     i2l1100:
  1191                           
  1192                           ;7seg.c: 56: pat = 0b01000000;
  1193  000392  0E40               	movlw	64
  1194  000394  D014               	goto	L5
  1195  000396                     i2l1102:
  1196                           
  1197                           ;7seg.c: 59: case '1':
  1198                           ;7seg.c: 60: case '2':
  1199                           ;7seg.c: 61: case '3':
  1200                           ;7seg.c: 62: case '4':
  1201                           ;7seg.c: 63: case '5':
  1202                           ;7seg.c: 64: case '6':
  1203                           ;7seg.c: 65: case '7':
  1204                           ;7seg.c: 66: case '8':
  1205                           ;7seg.c: 67: case '9':
  1206                           ;7seg.c: 68: pat = pattern[c - '0'];
  1207  000396  0ED0               	movlw	208
  1208  000398  6E03               	movwf	??_print_7seg& (0+255),c
  1209  00039A  0EFF               	movlw	255
  1210  00039C  6E04               	movwf	(??_print_7seg+1)& (0+255),c
  1211  00039E  5002               	movf	print_7seg@c,w,c
  1212  0003A0  6E05               	movwf	(??_print_7seg+2)& (0+255),c
  1213  0003A2  6A06               	clrf	(??_print_7seg+3)& (0+255),c
  1214  0003A4  5003               	movf	??_print_7seg,w,c
  1215  0003A6  2605               	addwf	??_print_7seg+2,f,c
  1216  0003A8  5004               	movf	??_print_7seg+1,w,c
  1217  0003AA  2206               	addwfc	??_print_7seg+3,f,c
  1218  0003AC  0E1F               	movlw	low print_7seg@pattern
  1219  0003AE  2405               	addwf	??_print_7seg+2,w,c
  1220  0003B0  6ED9               	movwf	fsr2l,c
  1221  0003B2  0E00               	movlw	high print_7seg@pattern
  1222  0003B4  2006               	addwfc	??_print_7seg+3,w,c
  1223  0003B6  6EDA               	movwf	fsr2h,c
  1224  0003B8  50DF               	movf	indf2,w,c
  1225  0003BA  D001               	goto	L5
  1226  0003BC                     i2l1104:
  1227                           
  1228                           ;7seg.c: 71: pat = 0b00000010;
  1229  0003BC  0E02               	movlw	2
  1230  0003BE                     L5:
  1231  0003BE  6E08               	movwf	print_7seg@pat,c
  1232                           
  1233                           ;7seg.c: 73: }
  1234                           
  1235                           ;7seg.c: 72: break;
  1236  0003C0  D029               	goto	i2l1110
  1237  0003C2                     i2l1108:
  1238  0003C2  5002               	movf	print_7seg@c,w,c
  1239                           
  1240                           ; Switch size 1, requested type "space"
  1241                           ; Number of cases is 13, Range of values is 32 to 58
  1242                           ; switch strategies available:
  1243                           ; Name         Instructions Cycles
  1244                           ; simple_byte           40    21 (average)
  1245                           ;	Chosen strategy is simple_byte
  1246  0003C4  0A20               	xorlw	32	; case 32
  1247  0003C6  B4D8               	btfsc	status,2,c
  1248  0003C8  D7E0               	goto	i2l1096
  1249  0003CA  0A0D               	xorlw	13	; case 45
  1250  0003CC  B4D8               	btfsc	status,2,c
  1251  0003CE  D7E1               	goto	i2l1100
  1252  0003D0  0A1D               	xorlw	29	; case 48
  1253  0003D2  B4D8               	btfsc	status,2,c
  1254  0003D4  D7E0               	goto	i2l1102
  1255  0003D6  0A01               	xorlw	1	; case 49
  1256  0003D8  B4D8               	btfsc	status,2,c
  1257  0003DA  D7DD               	goto	i2l1102
  1258  0003DC  0A03               	xorlw	3	; case 50
  1259  0003DE  B4D8               	btfsc	status,2,c
  1260  0003E0  D7DA               	goto	i2l1102
  1261  0003E2  0A01               	xorlw	1	; case 51
  1262  0003E4  B4D8               	btfsc	status,2,c
  1263  0003E6  D7D7               	goto	i2l1102
  1264  0003E8  0A07               	xorlw	7	; case 52
  1265  0003EA  B4D8               	btfsc	status,2,c
  1266  0003EC  D7D4               	goto	i2l1102
  1267  0003EE  0A01               	xorlw	1	; case 53
  1268  0003F0  B4D8               	btfsc	status,2,c
  1269  0003F2  D7D1               	goto	i2l1102
  1270  0003F4  0A03               	xorlw	3	; case 54
  1271  0003F6  B4D8               	btfsc	status,2,c
  1272  0003F8  D7CE               	goto	i2l1102
  1273  0003FA  0A01               	xorlw	1	; case 55
  1274  0003FC  B4D8               	btfsc	status,2,c
  1275  0003FE  D7CB               	goto	i2l1102
  1276  000400  0A0F               	xorlw	15	; case 56
  1277  000402  B4D8               	btfsc	status,2,c
  1278  000404  D7C8               	goto	i2l1102
  1279  000406  0A01               	xorlw	1	; case 57
  1280  000408  B4D8               	btfsc	status,2,c
  1281  00040A  D7C5               	goto	i2l1102
  1282  00040C  0A03               	xorlw	3	; case 58
  1283  00040E  B4D8               	btfsc	status,2,c
  1284  000410  D7BE               	goto	i2l1098
  1285  000412  D7D4               	goto	i2l1104
  1286  000414                     i2l1110:
  1287                           
  1288                           ;7seg.c: 74: print_column(0);
  1289  000414  0E00               	movlw	0
  1290  000416  EC8E  F002         	call	_print_column
  1291                           
  1292                           ;7seg.c: 75: print_pattern(pat);
  1293  00041A  5008               	movf	print_7seg@pat,w,c
  1294  00041C  ECD1  F002         	call	_print_pattern
  1295                           
  1296                           ;7seg.c: 76: print_column(col);
  1297  000420  5007               	movf	print_7seg@col,w,c
  1298  000422  EC8E  F002         	call	_print_column
  1299  000426  0012               	return		;funcret
  1300  000428                     __end_of_print_7seg:
  1301                           	opt stack 0
  1302                           pclatu	equ	0xFFB
  1303                           pclath	equ	0xFFA
  1304                           tblptru	equ	0xFF8
  1305                           tblptrh	equ	0xFF7
  1306                           tblptrl	equ	0xFF6
  1307                           tablat	equ	0xFF5
  1308                           prodh	equ	0xFF4
  1309                           prodl	equ	0xFF3
  1310                           intcon	equ	0xFF2
  1311                           intcon2	equ	0xFF1
  1312                           intcon3	equ	0xFF0
  1313                           postinc0	equ	0xFEE
  1314                           fsr0h	equ	0xFEA
  1315                           fsr0l	equ	0xFE9
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1h	equ	0xFE2
  1319                           fsr1l	equ	0xFE1
  1320                           indf2	equ	0xFDF
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _print_pattern *****************
  1326 ;; Defined at:
  1327 ;;		line 17 in file "7seg.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  pat             1    wreg     unsigned char 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;  pat             1    0[COMRAM] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      void 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1344 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1345 ;;Total ram usage:        1 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; This function calls:
  1348 ;;		Nothing
  1349 ;; This function is called by:
  1350 ;;		_print_7seg
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text4
  1355  0005A2                     __ptext4:
  1356                           	opt stack 0
  1357  0005A2                     _print_pattern:
  1358                           	opt stack 28
  1359                           
  1360                           ;incstack = 0
  1361                           ;print_pattern@pat stored from wreg
  1362  0005A2  6E01               	movwf	print_pattern@pat,c
  1363                           
  1364                           ;7seg.c: 18: LATB = ~pat;
  1365  0005A4  5001               	movf	print_pattern@pat,w,c
  1366  0005A6  0AFF               	xorlw	255
  1367  0005A8  6E8A               	movwf	3978,c	;volatile
  1368  0005AA  0012               	return		;funcret
  1369  0005AC                     __end_of_print_pattern:
  1370                           	opt stack 0
  1371                           pclatu	equ	0xFFB
  1372                           pclath	equ	0xFFA
  1373                           tblptru	equ	0xFF8
  1374                           tblptrh	equ	0xFF7
  1375                           tblptrl	equ	0xFF6
  1376                           tablat	equ	0xFF5
  1377                           prodh	equ	0xFF4
  1378                           prodl	equ	0xFF3
  1379                           intcon	equ	0xFF2
  1380                           intcon2	equ	0xFF1
  1381                           intcon3	equ	0xFF0
  1382                           postinc0	equ	0xFEE
  1383                           fsr0h	equ	0xFEA
  1384                           fsr0l	equ	0xFE9
  1385                           wreg	equ	0xFE8
  1386                           postdec1	equ	0xFE5
  1387                           fsr1h	equ	0xFE2
  1388                           fsr1l	equ	0xFE1
  1389                           indf2	equ	0xFDF
  1390                           fsr2h	equ	0xFDA
  1391                           fsr2l	equ	0xFD9
  1392                           status	equ	0xFD8
  1393                           
  1394 ;; *************** function _print_column *****************
  1395 ;; Defined at:
  1396 ;;		line 9 in file "7seg.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;  col             1    wreg     unsigned char 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  col             1    0[COMRAM] unsigned char 
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1413 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1414 ;;Total ram usage:        1 bytes
  1415 ;; Hardware stack levels used:    1
  1416 ;; This function calls:
  1417 ;;		Nothing
  1418 ;; This function is called by:
  1419 ;;		_print_7seg
  1420 ;; This function uses a non-reentrant model
  1421 ;;
  1422                           
  1423                           	psect	text5
  1424  00051C                     __ptext5:
  1425                           	opt stack 0
  1426  00051C                     _print_column:
  1427                           	opt stack 28
  1428                           
  1429                           ;incstack = 0
  1430                           ;print_column@col stored from wreg
  1431  00051C  6E01               	movwf	print_column@col,c
  1432                           
  1433                           ;7seg.c: 10: LATA1 = (col == 1);
  1434  00051E  0401               	decf	print_column@col,w,c
  1435  000520  A4D8               	btfss	status,2,c
  1436  000522  D002               	goto	i2u38_40
  1437  000524  8289               	bsf	3977,1,c	;volatile
  1438  000526  D001               	goto	i2l1084
  1439  000528                     i2u38_40:
  1440  000528  9289               	bcf	3977,1,c	;volatile
  1441  00052A                     i2l1084:
  1442                           
  1443                           ;7seg.c: 11: LATA2 = (col == 2);
  1444  00052A  0E02               	movlw	2
  1445  00052C  1801               	xorwf	print_column@col,w,c
  1446  00052E  A4D8               	btfss	status,2,c
  1447  000530  D002               	goto	i2u40_40
  1448  000532  8489               	bsf	3977,2,c	;volatile
  1449  000534  D001               	goto	i2l1086
  1450  000536                     i2u40_40:
  1451  000536  9489               	bcf	3977,2,c	;volatile
  1452  000538                     i2l1086:
  1453                           
  1454                           ;7seg.c: 12: LATC7 = (col == 3);
  1455  000538  0E03               	movlw	3
  1456  00053A  1801               	xorwf	print_column@col,w,c
  1457  00053C  A4D8               	btfss	status,2,c
  1458  00053E  D002               	goto	i2u42_40
  1459  000540  8E8B               	bsf	3979,7,c	;volatile
  1460  000542  D001               	goto	i2l1088
  1461  000544                     i2u42_40:
  1462  000544  9E8B               	bcf	3979,7,c	;volatile
  1463  000546                     i2l1088:
  1464                           
  1465                           ;7seg.c: 13: LATC6 = (col == 4);
  1466  000546  0E04               	movlw	4
  1467  000548  1801               	xorwf	print_column@col,w,c
  1468  00054A  A4D8               	btfss	status,2,c
  1469  00054C  D002               	goto	i2u44_40
  1470  00054E  8C8B               	bsf	3979,6,c	;volatile
  1471  000550  D001               	goto	i2l1090
  1472  000552                     i2u44_40:
  1473  000552  9C8B               	bcf	3979,6,c	;volatile
  1474  000554                     i2l1090:
  1475                           
  1476                           ;7seg.c: 14: LATA3 = (col == 5);
  1477  000554  0E05               	movlw	5
  1478  000556  1801               	xorwf	print_column@col,w,c
  1479  000558  A4D8               	btfss	status,2,c
  1480  00055A  D002               	goto	i2u46_40
  1481  00055C  8689               	bsf	3977,3,c	;volatile
  1482  00055E  0012               	return	
  1483  000560                     i2u46_40:
  1484  000560  9689               	bcf	3977,3,c	;volatile
  1485  000562  0012               	return		;funcret
  1486  000564                     __end_of_print_column:
  1487                           	opt stack 0
  1488                           pclatu	equ	0xFFB
  1489                           pclath	equ	0xFFA
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           prodh	equ	0xFF4
  1495                           prodl	equ	0xFF3
  1496                           intcon	equ	0xFF2
  1497                           intcon2	equ	0xFF1
  1498                           intcon3	equ	0xFF0
  1499                           postinc0	equ	0xFEE
  1500                           fsr0h	equ	0xFEA
  1501                           fsr0l	equ	0xFE9
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1h	equ	0xFE2
  1505                           fsr1l	equ	0xFE1
  1506                           indf2	equ	0xFDF
  1507                           fsr2h	equ	0xFDA
  1508                           fsr2l	equ	0xFD9
  1509                           status	equ	0xFD8
  1510                           
  1511 ;; *************** function ___awmod *****************
  1512 ;; Defined at:
  1513 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  dividend        2    0[COMRAM] int 
  1516 ;;  divisor         2    2[COMRAM] int 
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;  sign            1    5[COMRAM] unsigned char 
  1519 ;;  counter         1    4[COMRAM] unsigned char 
  1520 ;; Return value:  Size  Location     Type
  1521 ;;                  2    0[COMRAM] int 
  1522 ;; Registers used:
  1523 ;;		wreg, status,2, status,0
  1524 ;; Tracked objects:
  1525 ;;		On entry : 0/0
  1526 ;;		On exit  : 0/0
  1527 ;;		Unchanged: 0/0
  1528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1533 ;;Total ram usage:        6 bytes
  1534 ;; Hardware stack levels used:    1
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_ISR
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text6
  1543  0004AC                     __ptext6:
  1544                           	opt stack 0
  1545  0004AC                     ___awmod:
  1546                           	opt stack 29
  1547                           
  1548                           ;incstack = 0
  1549  0004AC  0E00               	movlw	0
  1550  0004AE  6E06               	movwf	___awmod@sign,c
  1551  0004B0  AE02               	btfss	___awmod@dividend+1,7,c
  1552  0004B2  D006               	goto	i2l1208
  1553  0004B4  6C01               	negf	___awmod@dividend,c
  1554  0004B6  1E02               	comf	___awmod@dividend+1,f,c
  1555  0004B8  B0D8               	btfsc	status,0,c
  1556  0004BA  2A02               	incf	___awmod@dividend+1,f,c
  1557  0004BC  0E01               	movlw	1
  1558  0004BE  6E06               	movwf	___awmod@sign,c
  1559  0004C0                     i2l1208:
  1560  0004C0  AE04               	btfss	___awmod@divisor+1,7,c
  1561  0004C2  D004               	goto	i2l1212
  1562  0004C4  6C03               	negf	___awmod@divisor,c
  1563  0004C6  1E04               	comf	___awmod@divisor+1,f,c
  1564  0004C8  B0D8               	btfsc	status,0,c
  1565  0004CA  2A04               	incf	___awmod@divisor+1,f,c
  1566  0004CC                     i2l1212:
  1567  0004CC  5003               	movf	___awmod@divisor,w,c
  1568  0004CE  1004               	iorwf	___awmod@divisor+1,w,c
  1569  0004D0  B4D8               	btfsc	status,2,c
  1570  0004D2  D018               	goto	i2l1228
  1571  0004D4  0E01               	movlw	1
  1572  0004D6  6E05               	movwf	___awmod@counter,c
  1573  0004D8  D004               	goto	i2l1218
  1574  0004DA                     i2l1216:
  1575  0004DA  90D8               	bcf	status,0,c
  1576  0004DC  3603               	rlcf	___awmod@divisor,f,c
  1577  0004DE  3604               	rlcf	___awmod@divisor+1,f,c
  1578  0004E0  2A05               	incf	___awmod@counter,f,c
  1579  0004E2                     i2l1218:
  1580  0004E2  AE04               	btfss	___awmod@divisor+1,7,c
  1581  0004E4  D7FA               	goto	i2l1216
  1582  0004E6                     i2l1220:
  1583  0004E6  5003               	movf	___awmod@divisor,w,c
  1584  0004E8  5C01               	subwf	___awmod@dividend,w,c
  1585  0004EA  5004               	movf	___awmod@divisor+1,w,c
  1586  0004EC  5802               	subwfb	___awmod@dividend+1,w,c
  1587  0004EE  A0D8               	btfss	status,0,c
  1588  0004F0  D004               	goto	i2l1224
  1589  0004F2  5003               	movf	___awmod@divisor,w,c
  1590  0004F4  5E01               	subwf	___awmod@dividend,f,c
  1591  0004F6  5004               	movf	___awmod@divisor+1,w,c
  1592  0004F8  5A02               	subwfb	___awmod@dividend+1,f,c
  1593  0004FA                     i2l1224:
  1594  0004FA  90D8               	bcf	status,0,c
  1595  0004FC  3204               	rrcf	___awmod@divisor+1,f,c
  1596  0004FE  3203               	rrcf	___awmod@divisor,f,c
  1597  000500  2E05               	decfsz	___awmod@counter,f,c
  1598  000502  D7F1               	goto	i2l1220
  1599  000504                     i2l1228:
  1600  000504  5006               	movf	___awmod@sign,w,c
  1601  000506  B4D8               	btfsc	status,2,c
  1602  000508  D004               	goto	i2l1232
  1603  00050A  6C01               	negf	___awmod@dividend,c
  1604  00050C  1E02               	comf	___awmod@dividend+1,f,c
  1605  00050E  B0D8               	btfsc	status,0,c
  1606  000510  2A02               	incf	___awmod@dividend+1,f,c
  1607  000512                     i2l1232:
  1608  000512  C001  F001         	movff	___awmod@dividend,?___awmod
  1609  000516  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1610  00051A  0012               	return	
  1611  00051C                     __end_of___awmod:
  1612                           	opt stack 0
  1613                           pclatu	equ	0xFFB
  1614                           pclath	equ	0xFFA
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           prodh	equ	0xFF4
  1620                           prodl	equ	0xFF3
  1621                           intcon	equ	0xFF2
  1622                           intcon2	equ	0xFF1
  1623                           intcon3	equ	0xFF0
  1624                           postinc0	equ	0xFEE
  1625                           fsr0h	equ	0xFEA
  1626                           fsr0l	equ	0xFE9
  1627                           wreg	equ	0xFE8
  1628                           postdec1	equ	0xFE5
  1629                           fsr1h	equ	0xFE2
  1630                           fsr1l	equ	0xFE1
  1631                           indf2	equ	0xFDF
  1632                           fsr2h	equ	0xFDA
  1633                           fsr2l	equ	0xFD9
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function ___awdiv *****************
  1637 ;; Defined at:
  1638 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;  dividend        2    0[COMRAM] int 
  1641 ;;  divisor         2    2[COMRAM] int 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  quotient        2    6[COMRAM] int 
  1644 ;;  sign            1    5[COMRAM] unsigned char 
  1645 ;;  counter         1    4[COMRAM] unsigned char 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  2    0[COMRAM] int 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, status,0
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1655 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1656 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1658 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1659 ;;Total ram usage:        8 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; This function calls:
  1662 ;;		Nothing
  1663 ;; This function is called by:
  1664 ;;		_ISR
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text7
  1669  000428                     __ptext7:
  1670                           	opt stack 0
  1671  000428                     ___awdiv:
  1672                           	opt stack 29
  1673                           
  1674                           ;incstack = 0
  1675  000428  0E00               	movlw	0
  1676  00042A  6E06               	movwf	___awdiv@sign,c
  1677  00042C  AE04               	btfss	___awdiv@divisor+1,7,c
  1678  00042E  D006               	goto	i2l1164
  1679  000430  6C03               	negf	___awdiv@divisor,c
  1680  000432  1E04               	comf	___awdiv@divisor+1,f,c
  1681  000434  B0D8               	btfsc	status,0,c
  1682  000436  2A04               	incf	___awdiv@divisor+1,f,c
  1683  000438  0E01               	movlw	1
  1684  00043A  6E06               	movwf	___awdiv@sign,c
  1685  00043C                     i2l1164:
  1686  00043C  AE02               	btfss	___awdiv@dividend+1,7,c
  1687  00043E  D006               	goto	i2l1170
  1688  000440  6C01               	negf	___awdiv@dividend,c
  1689  000442  1E02               	comf	___awdiv@dividend+1,f,c
  1690  000444  B0D8               	btfsc	status,0,c
  1691  000446  2A02               	incf	___awdiv@dividend+1,f,c
  1692  000448  0E01               	movlw	1
  1693  00044A  1A06               	xorwf	___awdiv@sign,f,c
  1694  00044C                     i2l1170:
  1695  00044C  0E00               	movlw	0
  1696  00044E  6E08               	movwf	___awdiv@quotient+1,c
  1697  000450  0E00               	movlw	0
  1698  000452  6E07               	movwf	___awdiv@quotient,c
  1699  000454  5003               	movf	___awdiv@divisor,w,c
  1700  000456  1004               	iorwf	___awdiv@divisor+1,w,c
  1701  000458  B4D8               	btfsc	status,2,c
  1702  00045A  D01C               	goto	i2l1192
  1703  00045C  0E01               	movlw	1
  1704  00045E  6E05               	movwf	___awdiv@counter,c
  1705  000460  D004               	goto	i2l1178
  1706  000462                     i2l1176:
  1707  000462  90D8               	bcf	status,0,c
  1708  000464  3603               	rlcf	___awdiv@divisor,f,c
  1709  000466  3604               	rlcf	___awdiv@divisor+1,f,c
  1710  000468  2A05               	incf	___awdiv@counter,f,c
  1711  00046A                     i2l1178:
  1712  00046A  AE04               	btfss	___awdiv@divisor+1,7,c
  1713  00046C  D7FA               	goto	i2l1176
  1714  00046E                     i2l1180:
  1715  00046E  90D8               	bcf	status,0,c
  1716  000470  3607               	rlcf	___awdiv@quotient,f,c
  1717  000472  3608               	rlcf	___awdiv@quotient+1,f,c
  1718  000474  5003               	movf	___awdiv@divisor,w,c
  1719  000476  5C01               	subwf	___awdiv@dividend,w,c
  1720  000478  5004               	movf	___awdiv@divisor+1,w,c
  1721  00047A  5802               	subwfb	___awdiv@dividend+1,w,c
  1722  00047C  A0D8               	btfss	status,0,c
  1723  00047E  D005               	goto	i2l1188
  1724  000480  5003               	movf	___awdiv@divisor,w,c
  1725  000482  5E01               	subwf	___awdiv@dividend,f,c
  1726  000484  5004               	movf	___awdiv@divisor+1,w,c
  1727  000486  5A02               	subwfb	___awdiv@dividend+1,f,c
  1728  000488  8007               	bsf	___awdiv@quotient,0,c
  1729  00048A                     i2l1188:
  1730  00048A  90D8               	bcf	status,0,c
  1731  00048C  3204               	rrcf	___awdiv@divisor+1,f,c
  1732  00048E  3203               	rrcf	___awdiv@divisor,f,c
  1733  000490  2E05               	decfsz	___awdiv@counter,f,c
  1734  000492  D7ED               	goto	i2l1180
  1735  000494                     i2l1192:
  1736  000494  5006               	movf	___awdiv@sign,w,c
  1737  000496  B4D8               	btfsc	status,2,c
  1738  000498  D004               	goto	i2l1196
  1739  00049A  6C07               	negf	___awdiv@quotient,c
  1740  00049C  1E08               	comf	___awdiv@quotient+1,f,c
  1741  00049E  B0D8               	btfsc	status,0,c
  1742  0004A0  2A08               	incf	___awdiv@quotient+1,f,c
  1743  0004A2                     i2l1196:
  1744  0004A2  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1745  0004A6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1746  0004AA  0012               	return	
  1747  0004AC                     __end_of___awdiv:
  1748                           	opt stack 0
  1749  0000                     pclatu	equ	0xFFB
  1750                           pclath	equ	0xFFA
  1751                           tblptru	equ	0xFF8
  1752                           tblptrh	equ	0xFF7
  1753                           tblptrl	equ	0xFF6
  1754                           tablat	equ	0xFF5
  1755                           prodh	equ	0xFF4
  1756                           prodl	equ	0xFF3
  1757                           intcon	equ	0xFF2
  1758                           intcon2	equ	0xFF1
  1759                           intcon3	equ	0xFF0
  1760                           postinc0	equ	0xFEE
  1761                           fsr0h	equ	0xFEA
  1762                           fsr0l	equ	0xFE9
  1763                           wreg	equ	0xFE8
  1764                           postdec1	equ	0xFE5
  1765                           fsr1h	equ	0xFE2
  1766                           fsr1l	equ	0xFE1
  1767                           indf2	equ	0xFDF
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           pclatu	equ	0xFFB
  1772                           pclath	equ	0xFFA
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           prodh	equ	0xFF4
  1778                           prodl	equ	0xFF3
  1779                           intcon	equ	0xFF2
  1780                           intcon2	equ	0xFF1
  1781                           intcon3	equ	0xFF0
  1782                           postinc0	equ	0xFEE
  1783                           fsr0h	equ	0xFEA
  1784                           fsr0l	equ	0xFE9
  1785                           wreg	equ	0xFE8
  1786                           postdec1	equ	0xFE5
  1787                           fsr1h	equ	0xFE2
  1788                           fsr1l	equ	0xFE1
  1789                           indf2	equ	0xFDF
  1790                           fsr2h	equ	0xFDA
  1791                           fsr2l	equ	0xFD9
  1792                           status	equ	0xFD8
  1793                           
  1794                           	psect	rparam
  1795  0000                     pclatu	equ	0xFFB
  1796                           pclath	equ	0xFFA
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           prodh	equ	0xFF4
  1802                           prodl	equ	0xFF3
  1803                           intcon	equ	0xFF2
  1804                           intcon2	equ	0xFF1
  1805                           intcon3	equ	0xFF0
  1806                           postinc0	equ	0xFEE
  1807                           fsr0h	equ	0xFEA
  1808                           fsr0l	equ	0xFE9
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1h	equ	0xFE2
  1812                           fsr1l	equ	0xFE1
  1813                           indf2	equ	0xFDF
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8
  1817                           
  1818                           	psect	temp
  1819  00002E                     btemp:
  1820                           	opt stack 0
  1821  00002E                     	ds	1
  1822  0000                     int$flags	set	btemp
  1823                           pclatu	equ	0xFFB
  1824                           pclath	equ	0xFFA
  1825                           tblptru	equ	0xFF8
  1826                           tblptrh	equ	0xFF7
  1827                           tblptrl	equ	0xFF6
  1828                           tablat	equ	0xFF5
  1829                           prodh	equ	0xFF4
  1830                           prodl	equ	0xFF3
  1831                           intcon	equ	0xFF2
  1832                           intcon2	equ	0xFF1
  1833                           intcon3	equ	0xFF0
  1834                           postinc0	equ	0xFEE
  1835                           fsr0h	equ	0xFEA
  1836                           fsr0l	equ	0xFE9
  1837                           wreg	equ	0xFE8
  1838                           postdec1	equ	0xFE5
  1839                           fsr1h	equ	0xFE2
  1840                           fsr1l	equ	0xFE1
  1841                           indf2	equ	0xFDF
  1842                           fsr2h	equ	0xFDA
  1843                           fsr2l	equ	0xFD9
  1844                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     30      45
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_dinamic
    _dinamic->_print_7seg
    _print_7seg->_print_column
    _print_7seg->_print_pattern

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0       0
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                 18    18      0    2626
                                             11 COMRAM    18    18      0
                            ___awdiv
                            ___awmod
                            _dinamic
                         _print_7seg
 ---------------------------------------------------------------------------------
 (2) _dinamic                                              3     3      0     679
                                              8 COMRAM     3     3      0
                         _print_7seg
 ---------------------------------------------------------------------------------
 (2) _print_7seg                                           7     6      1     655
                                              1 COMRAM     7     6      1
                       _print_column
                      _print_pattern
 ---------------------------------------------------------------------------------
 (3) _print_pattern                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _print_column                                         1     1      0     110
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     640
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     472
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)
   ___awdiv
   ___awmod
   _dinamic
     _print_7seg
       _print_column
       _print_pattern
   _print_7seg
     _print_column
     _print_pattern

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1E      2D       1       47.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2D       6        0.0%
DATA                 0      0      2D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Nov 25 14:18:28 2017

           ___awdiv@sign 0006             __CFG_CP0$OFF 000000                      _ISR 0008  
                    u757 0332                      u767 035E            print_7seg@col 0007  
          print_7seg@pat 0008             ___awmod@sign 0006                      wreg 000FE8  
                   ?_ISR 0001                     l1018 032C       __CFG_WPFP$PAGE_127 000000  
                   _LATB 000F8A                     _main 02CC                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr0l 000FE9                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
                   btemp 002E   __CFG_DSWDTOSC$T1OSCREF 000000                     pclat 000FFA  
                   prodh 000FF4                     prodl 000FF3                     start 01F4  
          __CFG_IESO$OFF 000000             ___param_bank 000010                    ??_ISR 000C  
          __CFG_PLLDIV$2 000000                    ?_main 0001          __end_of___awdiv 04AC  
        __end_of___awmod 051C          ___awdiv@divisor 0003                    _T1CON 000FCD  
                  _LATA0 007C48                    _LATA1 007C49                    _LATB0 007C50  
                  _LATA2 007C4A                    _LATB1 007C51                    _LATA3 007C4B  
                  _LATB2 007C52                    _LATB3 007C53                    _LATA5 007C4D  
                  _LATB4 007C54                    _LATB5 007C55                    _LATB6 007C56  
                  _LATB7 007C57                    _LATC6 007C5E                    _LATC7 007C5F  
                  i2l152 028A                    i2l161 007A                    i2l146 0252  
                  i2l170 01B8                    i2l166 0124          ___awdiv@counter 0005  
                  _TMR1H 000FCF                    _TMR1L 000FCE                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94          __end_of_dinamic 02CC  
         __CFG_FCMEN$OFF 000000                    tablat 000FF5                    status 000FD8  
        ??_print_pattern 0001          __initialization 0564             __end_of_main 0386  
                 ??_main 001E            __activetblptr 000003                   ISR@val 001C  
       print_pattern@pat 0001                   _EECON2 000FA7                   _ANCON0 000F48  
                 _ANCON1 000F49         ___awdiv@dividend 0001                   i2l1100 0392  
                 i2l1102 0396                   i2l1110 0414                   i2l1104 03BC  
                 i2l1130 0246                   i2l1122 021A                   i2l1114 01FA  
                 i2l1220 04E6                   i2l1212 04CC                   i2l1108 03C2  
                 i2l1140 0272                   i2l1142 0278                   i2l1126 022A  
                 i2l1118 020A                   i2l1232 0512                   i2l1224 04FA  
                 i2l1216 04DA                   i2l1208 04C0                   i2l1136 0260  
                 i2l1152 02A6                   i2l1170 044C                   i2l1218 04E2  
                 i2l1090 0554                   i2l1154 02C8                   i2l1180 046E  
                 i2l1164 043C                   i2l1228 0504                   i2l1084 052A  
                 i2l1086 0538                   i2l1246 005C                   i2l1176 0462  
                 i2l1192 0494                   i2l1088 0546                   i2l1096 038A  
                 i2l1178 046A                   i2l1098 038E                   i2l1196 04A2  
                 i2l1188 048A                   i2l1268 0106                   i2l1288 01AA  
         __CFG_WDTEN$OFF 000000                   _RTCCAL 000F3E                   _RTCCFG 000F3F  
                 _RPINR1 000EE1                   _RPINR2 000EE2           __CFG_WPCFG$OFF 000000  
         __CFG_WPDIS$OFF 000000           __CFG_XINST$OFF 000000                ??___awdiv 0005  
              ??___awmod 0005          __CFG_CLKOEC$OFF 000000         ___awdiv@quotient 0007  
        ___awmod@divisor 0003                ??_dinamic 0009          ___awmod@counter 0005  
           __pdataCOMRAM 001F                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8     __CFG_LS48MHZ$SYS48X8 000000               __accesstop 0060  
__end_of__initialization 058C            ___rparam_used 000001     __CFG_WPEND$PAGE_WPFP 000000  
         __pcstackCOMRAM 0001          __CFG_DSWDTPS$G2 000000          __CFG_OSC$INTOSC 000000  
                i2u40_40 0536                  i2u42_40 0544                  i2u44_40 0552  
        __CFG_WDTPS$1024 000000                  i2u46_40 0560                  i2u38_40 0528  
                _RTCVALH 000F3B                  _RTCVALL 000F3A                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 0428                  ___awmod 04AC  
        __CFG_STVREN$OFF 000000                  __pcinit 0564                  __ramtop 0F00  
                _dinamic 01F8                  __ptext0 02CC                  __ptext2 01F8  
                __ptext3 0386                  __ptext4 05A2                  __ptext5 051C  
                __ptext6 04AC                  __ptext7 0428             __size_of_ISR 01EC  
       ___awmod@dividend 0001   dinamic@dinamic_counter 0029     end_of_initialization 058C  
      print_7seg@pattern 001F    __end_of_print_pattern 05AC                  postdec1 000FE5  
             dinamic@hou 002A               dinamic@min 002B               dinamic@sec 002C  
             dinamic@wkd 002D                  postinc0 000FEE               _print_7seg 0386  
              _PORTAbits 000F80                _PORTCbits 000F82         __CFG_DSBOREN$OFF 000000  
          ?_print_column 0001         __CFG_CPUDIV$OSC1 000000              print_7seg@c 0002  
      __CFG_SOSCSEL$HIGH 000000          print_column@col 0001         __CFG_IOL1WAY$OFF 000000  
    __CFG_MSSP7B_EN$MSK7 000000            __pidataCOMRAM 0596         __CFG_DSWDTEN$OFF 000000  
         ??_print_column 0001      start_initialization 0564              __end_of_ISR 01F4  
      __CFG_ADCSEL$BIT12 000000              ?_print_7seg 0002              __pbssCOMRAM 002A  
             ISR@val_669 001D                __pintcode 0008                 ?___awdiv 0001  
               ?___awmod 0001              _dinamic$621 000A                 ?_dinamic 0001  
   __CFG_RTCOSC$T1OSCREF 000000      __size_of_print_7seg 00A2                 _PIE1bits 000F9D  
   __end_of_print_column 0564                 _PIR1bits 000F9E        __CFG_CFGPLLEN$OFF 000000  
            _INTCON2bits 000FF1              _INTCON3bits 000FF0                copy_data0 0580  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0084  
       __size_of___awmod 0070         __size_of_dinamic 00D4   __size_of_print_pattern 000A  
             _DSCONHbits 000F4D               _DSCONLbits 000F4C            __size_of_main 00BA  
               int$flags 002E             ??_print_7seg 0003               _INTCONbits 000FF2  
               intlevel2 0000    __size_of_print_column 0048       __end_of_print_7seg 0428  
             _OSCCONbits 000FD3            _print_pattern 05A2               _RTCCFGbits 000F3F  
           _print_column 051C           ?_print_pattern 0001  
